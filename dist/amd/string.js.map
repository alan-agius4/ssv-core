{"version":3,"sources":["string.ts"],"names":[],"mappings":";;IAEA;QAAA;YAEC;;;;eAIG;YACH,oBAAe,GAAwB;gBACtC,SAAS;gBACT,MAAM,EAAE,IAAI;gBACZ,GAAG,EAAE,IAAI;gBACT,KAAK,EAAE,IAAI;gBACX,GAAG,EAAE,IAAI;gBACT,IAAI,EAAE,IAAI;gBACV,QAAQ;gBACR,OAAO,EAAE,KAAK;gBACd,GAAG,EAAE,KAAK;gBACV,IAAI,EAAE,KAAK;gBACX,GAAG,EAAE,KAAK;gBACV,KAAK,EAAE,KAAK;aACZ,CAAC;QA6CH,CAAC;QA3CA;;;;;;;WAOG;QACH,sCAAW,GAAX,UAAY,KAAa,EAAE,IAAS,EAAE,iBAAuB;YAAvB,iCAAuB,GAAvB,uBAAuB;YAC5D,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;YAClB,IAAI,iBAAiB,GAAG,KAAK,CAAC,OAAO,CAAC,yBAAyB,EAAE,EAAE,CAAC,CAAC;YAErE,GAAG,CAAC,CAAC,IAAM,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC;gBAC7B,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;oBACnC,iBAAiB,GAAG,iBAAiB,CAAC,OAAO,CAAC,KAAG,iBAAiB,GAAG,QAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAClG,CAAC;YACF,CAAC;YAED,MAAM,CAAC,iBAAiB,CAAC;QAC1B,CAAC;QAED;;;;;;WAMG;QACH,oCAAS,GAAT,UAAU,KAAa;YACtB,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;QAC5D,CAAC;QAED;;;;;;;WAOG;QACH,qCAAU,GAAV,UAAW,KAAa,EAAE,MAAc,EAAE,WAAmB;YAC5D,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,EAAE,WAAW,CAAC,CAAC;QAC5D,CAAC;;QACF,uBAAC;IAAD,CAjEA,AAiEC,IAAA;IAjEY,wBAAgB,mBAiE5B,CAAA","file":"string.js","sourcesContent":["import {Dictionary} from \"./collection\";\r\n\r\nexport class StringExtensions {\r\n\r\n\t/**\r\n\t * parseBool configuration to add/remove possible values.\r\n\t *\r\n\t * @type {Dictionary<boolean>}\r\n\t */\r\n\tparseBoolConfig: Dictionary<boolean> = {\r\n\t\t// truthy\r\n\t\t\"true\": true,\r\n\t\t\"1\": true,\r\n\t\t\"yes\": true,\r\n\t\t\"y\": true,\r\n\t\t\"on\": true,\r\n\t\t// falsy\r\n\t\t\"false\": false,\r\n\t\t\"0\": false,\r\n\t\t\"no\": false,\r\n\t\t\"n\": false,\r\n\t\t\"off\": false\r\n\t};\r\n\r\n\t/**\r\n\t * Interpolates the string with the data specified by using the prefix (:) default as token.\r\n\t * e.g. 'api/:lang/games' => 'api/en/games'\r\n\t * @param {string} value string template to interpolate\r\n\t * @param {*} data data object to replace tokens\r\n\t * @param {string} [interpolatePrefix=\":\"] interpolation token prefix\r\n\t * @returns interpolated string\r\n\t */\r\n\tinterpolate(value: string, data: any, interpolatePrefix = \":\") {\r\n\t\tdata = data || {};\r\n\t\tlet interpolatedValue = value.replace(/(\\(\\s*|\\s*\\)|\\s*\\|\\s*)/g, \"\");\r\n\r\n\t\tfor (const property in data) {\r\n\t\t\tif (data.hasOwnProperty(property)) {\r\n\t\t\t\tinterpolatedValue = interpolatedValue.replace(`${interpolatePrefix}${property}`, data[property]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn interpolatedValue;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses a value to boolean \"humanized\", which can also be configured in order to add additional values. e.g.\r\n\t * true => \"true\", \"1\", \"yes\", \"y\", \"on\"\r\n\t * false => \"false\", \"0\", \"no\", \"n\", \"off\"\r\n\t * @param {string} value string value to parse\r\n\t * @returns {boolean} true or false\r\n\t */\r\n\tparseBool(value: string): boolean {\r\n\t\treturn this.parseBoolConfig[(String(value).toLowerCase())];\r\n\t}\r\n\r\n\t/**\r\n\t * Replaces all occurrences with a string with the specified value.\r\n\t *\r\n\t * @param {string} value value to search within\r\n\t * @param {string} search value to search for e.g. \"//\"\r\n\t * @param {string} replacement value to replace with e.g. \"/\"\r\n\t * @returns {string} Returns string with the replaced values\r\n\t */\r\n\treplaceAll(value: string, search: string, replacement: string): string {\r\n\t\treturn value.replace(new RegExp(search, \"g\"), replacement);\r\n\t};\r\n}"]}
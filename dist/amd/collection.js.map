{"version":3,"sources":["collection.ts"],"names":[],"mappings":";;IAWA;QAAA;QAeA,CAAC;QAbA;;;;WAIG;QACH,oDAAqB,GAArB,UAAsB,UAAwB,EAAE,UAAsB;YAErE,GAAG,CAAC,CAAa,UAAU,EAAV,yBAAU,EAAV,wBAAU,EAAV,IAAU,CAAC;gBAAvB,IAAI,IAAI,mBAAA;gBACZ,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;aACxB;YAED,UAAU,CAAC,UAAU,GAAG,IAAI,CAAC;QAC9B,CAAC;QACF,2BAAC;IAAD,CAfA,AAeC,IAAA;IAfY,4BAAoB,uBAehC,CAAA","file":"collection.js","sourcesContent":["export interface Selectable {\r\n\t/**\r\n\t * Gets or sets whether the item is selected or not.\r\n\t */\r\n\tisSelected: boolean;\r\n}\r\n\r\nexport interface Dictionary<T> {\r\n\t[key: string]: T;\r\n}\r\n\r\nexport class CollectionExtensions {\r\n\r\n\t/**\r\n\t * Unselect all collection items and select only the item specified.\r\n\t * @param {Selectable[]} collection collection to unselect.\r\n\t * @param {Selectable} selectItem item to select.\r\n\t */\r\n\tmutualExclusiveSelect(collection: Selectable[], selectItem: Selectable): void {\r\n\r\n\t\tfor (let item of collection) {\r\n\t\t\titem.isSelected = false;\r\n\t\t}\r\n\r\n\t\tselectItem.isSelected = true;\r\n\t}\r\n}"]}
{"version":3,"sources":["collection.svc.ts"],"names":["CollectionService","CollectionService.constructor","CollectionService.mutualExclusiveSelect"],"mappings":";IASA;QAAAA;QAeAC,CAACA;QAbAD;;;;WAIGA;QACHA,iDAAqBA,GAArBA,UAAsBA,UAAyBA,EAAEA,UAAuBA;YAEvEE,CAACA,CAACA,OAAOA,CAACA,UAAUA,EAAEA,UAAAA,CAACA;gBACtBA,CAACA,CAACA,UAAUA,GAAGA,KAAKA,CAACA;YACtBA,CAACA,CAACA,CAACA;YAEHA,UAAUA,CAACA,UAAUA,GAAGA,IAAIA,CAACA;QAC9BA,CAACA;QACFF,wBAACA;IAADA,CAfA,AAeCA,IAAA;IAfY,yBAAiB,oBAe7B,CAAA","file":"collection.svc.js","sourcesContent":["import * as _ from \"lodash\";\r\n\r\nexport interface ISelectable {\r\n\t/**\r\n\t * Gets or sets whether the item is selected or not.\r\n\t */\r\n\tisSelected: boolean;\r\n}\r\n\r\nexport class CollectionService {\r\n\r\n\t/**\r\n\t * Unselect all collection items and select only the item specified.\r\n\t * @param {ISelectable[]} collection collection to unselect.\r\n\t * @param {ISelectable} selectItem item to select.\r\n\t */\r\n\tmutualExclusiveSelect(collection: ISelectable[], selectItem: ISelectable): void {\r\n\t\t\r\n\t\t_.forEach(collection, x => {\r\n\t\t\tx.isSelected = false;\r\n\t\t});\r\n\r\n\t\tselectItem.isSelected = true;\r\n\t}\r\n}"],"sourceRoot":"/source/"}